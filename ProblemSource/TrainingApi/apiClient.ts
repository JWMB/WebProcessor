//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class AccountsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    post(dto: AccountCreateDTO): Promise<Account> {
        let url_ = this.baseUrl + "/Accounts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<Account> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as Account;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Account>(null as any);
    }

    put(dto: AccountCreateDTO): Promise<Account> {
        let url_ = this.baseUrl + "/Accounts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPut(_response);
        });
    }

    protected processPut(response: Response): Promise<Account> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as Account;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Account>(null as any);
    }

    get(skip: number | undefined, take: number | undefined, orderBy: string | null | undefined, descending: boolean | undefined): Promise<Account[]> {
        let url_ = this.baseUrl + "/Accounts?";
        if (skip === null)
            throw new Error("The parameter 'skip' cannot be null.");
        else if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take === null)
            throw new Error("The parameter 'take' cannot be null.");
        else if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        if (orderBy !== undefined && orderBy !== null)
            url_ += "orderBy=" + encodeURIComponent("" + orderBy) + "&";
        if (descending === null)
            throw new Error("The parameter 'descending' cannot be null.");
        else if (descending !== undefined)
            url_ += "descending=" + encodeURIComponent("" + descending) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<Account[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as Account[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Account[]>(null as any);
    }
}

export class AggregatesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    trainingDayAccount(accountId: number | undefined): Promise<TrainingDayAccount[]> {
        let url_ = this.baseUrl + "/Aggregates/TrainingDayAccount?";
        if (accountId === null)
            throw new Error("The parameter 'accountId' cannot be null.");
        else if (accountId !== undefined)
            url_ += "accountId=" + encodeURIComponent("" + accountId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTrainingDayAccount(_response);
        });
    }

    protected processTrainingDayAccount(response: Response): Promise<TrainingDayAccount[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as TrainingDayAccount[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TrainingDayAccount[]>(null as any);
    }

    phaseStatistics(accountId: number | undefined): Promise<PhaseStatistics[]> {
        let url_ = this.baseUrl + "/Aggregates/PhaseStatistics?";
        if (accountId === null)
            throw new Error("The parameter 'accountId' cannot be null.");
        else if (accountId !== undefined)
            url_ += "accountId=" + encodeURIComponent("" + accountId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPhaseStatistics(_response);
        });
    }

    protected processPhaseStatistics(response: Response): Promise<PhaseStatistics[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as PhaseStatistics[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PhaseStatistics[]>(null as any);
    }
}

export interface Account {
    id: number;
    numDays: number;
    latest: Date;
}

export interface AccountCreateDTO {
    trainingPlan: string;
    trainingSettings: TrainingSettings;
}

export interface TrainingSettings {
    timeLimits: number[];
    uniqueGroupWeights?: any | undefined;
    manuallyUnlockedExercises?: string[] | undefined;
    idleTimeout?: number | undefined;
    cultureCode: string;
    customData?: CustomData | undefined;
    triggers?: TriggerData[] | undefined;
    pacifistRatio?: number | undefined;
    trainingPlanOverrides?: any | undefined;
    syncSettings?: TrainingSyncSettings | undefined;
    alarmClockInvisible?: boolean | undefined;
}

export interface CustomData {
    menuButton?: boolean | undefined;
    canLogout?: boolean | undefined;
    unlockAllPlanets?: boolean | undefined;
    appVersion?: any | undefined;
    allowMultipleLogins?: boolean | undefined;
    canEnterCompleted?: boolean | undefined;
    nuArch?: any | undefined;
    medalMode?: any | undefined;
    clearClientUserData?: any | undefined;
    debugSync?: any | undefined;
    numberLine?: any | undefined;
    displayAppVersion?: boolean | undefined;
}

export interface TriggerData {
    type?: string | undefined;
    triggerTime: TriggerTimeType;
    criteriaValues: any[];
    actionData: TriggerActionData;
}

export enum TriggerTimeType {
    POST_RACE = 0,
    POST_RACE_SUCCESS = 1,
    POST_RACE_FAIL = 2,
    LEAVE_TEST = 3,
    END_OF_DAY = 4,
    START_OF_DAY = 5,
    MAP = 6,
    MAP_POST_WIN = 7,
}

export interface TriggerActionData {
    type?: string | undefined;
    id: string;
    properties?: any | undefined;
}

export interface TrainingSyncSettings {
    eraseLocalData: boolean;
    eraseLocalUserFullState: boolean;
    eraseLocalLog: boolean;
    syncOnInit: boolean;
    defaultSyncUrl: string;
    routerUrl: string;
    syncTriggerCode: string;
}

export interface TrainingDayAccount {
    accountId: number;
    accountUuid: string;
    trainingDay: number;
    startTime: Date;
    endTimeStamp: Date;
    numRacesWon: number;
    numRaces: number;
    numPlanetsWon: number;
    numCorrectAnswers: number;
    numQuestions: number;
    responseMinutes: number;
    remainingMinutes: number;
}

export interface PhaseStatistics {
    id: number;
    phase_id: number;
    account_id: number;
    training_day: number;
    exercise: string;
    phase_type: string;
    timestamp: Date;
    end_timestamp: Date;
    sequence: number;
    num_questions: number;
    num_correct_first_try: number;
    num_correct_answers: number;
    num_incorrect_answers: number;
    level_min: number;
    level_max: number;
    response_time_avg: number;
    response_time_total: number;
    won_race?: boolean | undefined;
    completed_planet?: boolean | undefined;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}